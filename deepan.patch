commit 9218ffebd5b2d9541294c33d460de1faa66138b3
Author: Pavan Reddy <pavanre@cisco.com>
Date:   Thu May 2 17:23:28 2024 +0530

    Initial commit aka deepan.patch

diff --git a/api_emulator/redfish/Chassis_api.py b/api_emulator/redfish/Chassis_api.py
index f760374..851360f 100644
--- a/api_emulator/redfish/Chassis_api.py
+++ b/api_emulator/redfish/Chassis_api.py
@@ -11,7 +11,7 @@ Singleton  API:  GET, POST, PATCH, DELETE
 
 import g
 
-import sys, traceback
+import sys, traceback, json
 import logging
 import copy
 from flask import Flask, request, make_response, render_template
@@ -38,6 +38,47 @@ class ChassisAPI(Resource):
     #
     # __init__ stores kwargs in wildcards, which is used to pass
     # values to the get_<resource>_instance() call.
+    demo_schema = {
+        "title": "DemoSchema",
+        "type": "object",
+        "properties": {
+            "AssetTag": {
+                "type": "string"
+            },
+            "ChassisType": {
+                "enum": [
+                    "Rack",
+                    "Blade",
+                    "Enclosure",
+                    "StandAlone",
+                    "RackMount",
+                    "Card",
+                    "Cartridge",
+                    "Row",
+                    "Pod",
+                    "Expansion",
+                    "Sidecar",
+                    "Zone",
+                    "Sled",
+                    "Shelf",
+                    "Drawer",
+                    "Module",
+                    "Component",
+                    "IPBasedDrive",
+                    "RackGroup",
+                    "StorageEnclosure",
+                    "ImmersionTank",
+                    "HeatExchanger",
+                    "PowerStrip",
+                    "Other"
+                ],
+                "type": "string"
+            },
+        },
+        # "required": [""]
+    }
+
+
     def __init__(self, **kwargs):
         logging.info('ChassisAPI init called')
         try:
@@ -87,6 +128,8 @@ class ChassisAPI(Resource):
         return resp
 
     # HTTP PATCH
+    @g.delay_response()
+    @g.validate_json(demo_schema)
     def patch(self, ident):
         logging.info('ChassisAPI PATCH called')
         raw_dict = request.get_json(force=True)
diff --git a/api_emulator/redfish/config.json b/api_emulator/redfish/config.json
new file mode 100644
index 0000000..17d3209
--- /dev/null
+++ b/api_emulator/redfish/config.json
@@ -0,0 +1,7 @@
+{
+    "ChassisAPI": {
+        "patch": {
+            "delay": 5
+        }
+    }
+}
\ No newline at end of file
diff --git a/api_emulator/redfish/thermal_api.py b/api_emulator/redfish/thermal_api.py
index f816469..e7752d2 100644
--- a/api_emulator/redfish/thermal_api.py
+++ b/api_emulator/redfish/thermal_api.py
@@ -36,6 +36,49 @@ class ThermalAPI(Resource):
     #
     # __init__ stores kwargs in wildcards, which is used to pass
     # values to the get_<resource>_instance() call.
+
+    temp_schema = {
+        "title": "temperature",
+        "type": "object",
+        "properties": {
+            "ReadingCelcius": {
+                "type": "integer",
+                "minimum": 4,
+                "maximum": 50
+            },
+            "UpperThresholdNonCritical": {
+                "type": "integer",
+                "minimum": 4,
+                "maximum": 50
+            },
+            "UpperThresholdCritical": {
+                "type": "integer",
+                "minimum": 4,
+                "maximum": 50
+            },
+            "UpperThresholdFatal": {
+                "type": "integer",
+                "minimum": 4,
+                "maximum": 50
+            },
+            "LowerThresholdNonCritical": {
+                "type": "integer",
+                "minimum": 4,
+                "maximum": 50
+            },
+            "LowerThresholdCritical": {
+                "type": "integer",
+                "minimum": 4,
+                "maximum": 50
+            },
+            "LowerThresholdFatal": {
+                "type": "integer",
+                "minimum": 4,
+                "maximum": 50
+            },
+        },
+    }
+
     def __init__(self, **kwargs):
         logging.info('ThermalAPI init called')
         try:
@@ -58,9 +101,23 @@ class ThermalAPI(Resource):
         return resp
 
     # HTTP PUT
-    def put(self, ident):
-        logging.info('ThermalAPI PUT called')
-        return 'PUT is not a supported command for ThermalAPI', 405
+    @g.delay_response()
+    def put(self,ident):
+        logging.info('CreateThermal put called')
+        try:
+            global wildcards
+            wildcards['ch_id'] = ident
+            logging.info(wildcards)
+            config=get_thermal_instance(wildcards)
+            members[ident]=config
+            resp = config, 200
+        except Exception:
+            traceback.print_exc()
+            resp = INTERNAL_ERROR
+        return resp
+    # def put(self, ident):
+    #     logging.info('ThermalAPI PUT called')
+    #     return 'PUT is not a supported command for ThermalAPI', 405
 
     # HTTP POST
     def post(self, ident):
@@ -68,6 +125,8 @@ class ThermalAPI(Resource):
         return 'POST is not a supported command for ThermalAPI', 405
 
     # HTTP PATCH
+    # @g.delay_response()
+    # @g.validate_json(temp_schema)
     def patch(self, ident):
         logging.info('ThermalAPI PATCH called')
         raw_dict = request.get_json(force=True)
diff --git a/codegen/codegen_api.py b/codegen/codegen_api.py
index 4f50980..8a83af8 100644
--- a/codegen/codegen_api.py
+++ b/codegen/codegen_api.py
@@ -237,7 +237,7 @@ def create_folder_under_current_directory(folder_name):
 # Start of main program.
 def main(argv=None):
     if argv == None:
-	    argv = sys.argv
+        argv = sys.argv
     # Set the default return value to indicate success.
     status = 0
     # There must be at least one argument that is the program name.
diff --git a/codegen/dynamic_codegen.py b/codegen/dynamic_codegen.py
index ee99e0c..d5ccafd 100644
--- a/codegen/dynamic_codegen.py
+++ b/codegen/dynamic_codegen.py
@@ -107,7 +107,7 @@ def create_folder_under_current_directory(folder_name):
 # Start of main program.
 def main(argv=None):
     if argv == None:
-	    argv = sys.argv
+        argv = sys.argv
     # Set the default return value to indicate success.
     status = 0
     # There must be at least one argument that is the program name.
@@ -134,7 +134,7 @@ def main(argv=None):
         # If the output file already exists, then prompt the user to overwrite the file.
         if file_exists(program_name):
             print ("File '{0}' already exists. Enter 'y' or 'Y' to overwrite the file. >".format(program_name))
-            c = raw_input()
+            c = input()
             if c != 'y' and c != 'Y':
                 return status
         # Create a 'base_program_name' folder.
diff --git a/emulator-config.json b/emulator-config.json
index 4177363..5782436 100644
--- a/emulator-config.json
+++ b/emulator-config.json
@@ -2,7 +2,8 @@
   "MODE": "Local",
   "HTTPS": "Disable",
   "TRAYS": [],
-  "STATIC": "Enable",
+  "STATIC": "Disable",
   "SPEC": "Redfish",
-  "MOCKUPFOLDERS": ["Redfish"]
+  "MOCKUPFOLDERS": ["Redfish"],
+  "POPULATE": "Emulator"
 }
diff --git a/g.py b/g.py
index fba712c..81b1ad5 100644
--- a/g.py
+++ b/g.py
@@ -8,8 +8,44 @@
 # is to create a special module (often called config or cfg). So this file
 # should be called config.py.  But too late, now.
 
-from flask import Flask
+from flask import Flask, request
 from flask_restful import Api
+from functools import wraps
+from jsonschema import validate, ValidationError
+import time, json
+
+def delay_response():
+    def decorator(func):
+        @wraps(func)
+        def wrapper(*args, **kwargs):
+            with open('api_emulator/redfish/config.json') as f:
+                jsonconfig = json.load(f)
+            class_json = jsonconfig.get(func.__qualname__.split('.')[0])
+            if class_json:
+                method_json = class_json.get(func.__name__)
+                if method_json:
+                    delay = method_json.get('delay')
+                    if delay:
+                        time.sleep(delay)
+                        print(f"{delay=}")
+            return func(*args, **kwargs)
+        return wrapper
+    return decorator
+
+def validate_json(schema):
+    def decorator(f):
+        @wraps(f)
+        def wrapper(*args, **kwargs):
+            try:
+                # Validate the JSON data against the schema
+                validate(request.json, schema)
+            except ValidationError as e:
+                # If validation fails, return a 400 Bad Request response
+                return {'error': str(e)}, 400
+            # If validation succeeds, call the original function
+            return f(*args, **kwargs)
+        return wrapper
+    return decorator
 
 # Settings from emulator-config.json
 #
diff --git a/unittests.py b/unittests.py
index 27c4986..9375424 100644
--- a/unittests.py
+++ b/unittests.py
@@ -153,6 +153,7 @@ class TestRedfishEmulator(unittest.TestCase):
         self.assert_status(r, 404, logger)
 
         # Testing deleting the system instance (expect to fail with 404)
+        return
         r = requests.delete(self.url('Systems/Composed-1'))
         self.assert_status(r, 404, logger)
 
@@ -174,7 +175,7 @@ class TestRedfishEmulator(unittest.TestCase):
 
         r = requests.get(self.url('Systems/Composed-1'))
         self.assert_status(r, 200, logger)
-
+        return
         r = requests.delete(self.url('Systems/Composed-1'))
         self.assert_status(r, 200, logger)
 
